
# Generated by CodiumAI
from django.conf import settings

from multitenancy.profiles.models import Skills, Profile

import uuid
from multitenancy.profiles.models import avatar_upload


import unittest

User = settings.AUTH_USER_MODEL

class TestAvatarUpload(unittest.TestCase):

    # Test that the avatar_upload function returns the correct file path when given an empty filename.
    def test_empty_filename(self):
        instance = None
        filename = ""
        expected_path = "avatars/{}.jpg".format(uuid.uuid4())
    
        result = avatar_upload(instance, filename)
    
        self.assertEqual(result, expected_path)



class TestSkills(unittest.TestCase):
    # Test that a new instance of Skills can be created with a valid name
    def test_create_instance_with_valid_name(self):
        # Arrange
        valid_name = "Python"
    
        # Act
        skills = Skills(name=valid_name)
    
        # Assert
        self.assertEqual(skills.name, valid_name)


    # Test that a Skills instance can be saved with a valid name
    def test_save_valid_name(self):
        # Create a valid name
        name = "Python"

        # Create a Skills instance with the valid name
        skills = Skills(name=name)
        skills.save()

        # Check if the Skills instance was saved successfully
        self.assertEqual(Skills.objects.count(), 1)
        self.assertEqual(Skills.objects.first().name, name)



class TestProfile(unittest.TestCase):
    # Test that a Profile object can be created with all fields
    def test_create_profile_with_all_fields(self):
        # Create a user object
        user = User.objects.create(username="testuser")

        # Create a Skills object
        skills = Skills.objects.create(name="Python")

        # Create a Profile object with all fields
        profile = Profile.objects.create(
            user=user,
            name="John Doe",
            job_title="Software Engineer",
            avatar="path/to/avatar.jpg",
            bio="Lorem ipsum dolor sit amet",
            education="Bachelor's Degree",
            display_profile=True,
            location="New York",
            website="https://www.example.com",
            twitter_username="johndoe"
        )

        # Assert that the Profile object is created successfully
        self.assertEqual(profile.user, user)
        self.assertEqual(profile.name, "John Doe")
        self.assertEqual(profile.job_title, "Software Engineer")
        self.assertEqual(profile.avatar, "path/to/avatar.jpg")
        self.assertEqual(profile.bio, "Lorem ipsum dolor sit amet")
        self.assertEqual(profile.education, "Bachelor's Degree")
        self.assertEqual(profile.display_profile, True)
        self.assertEqual(profile.location, "New York")
        self.assertEqual(profile.website, "https://www.example.com")
        self.assertEqual(profile.twitter_username, "johndoe")


    # Test that a Profile object can be saved with all fields
    def test_save_profile_with_all_fields(self):
        # Create a user
        user = User.objects.create(username="testuser")
    
        # Create a Skills object
        skills = Skills.objects.create(name="Python")
    
        # Create a Profile object with all fields
        profile = Profile.objects.create(
            user=user,
            name="John Doe",
            job_title="Software Engineer",
            avatar="path/to/avatar.jpg",
            bio="Lorem ipsum dolor sit amet",
            education="Bachelor's Degree",
            display_profile=True,
            location="New York",
            website="https://www.example.com",
            twitter_username="johndoe"
        )
    
        # Assert that the Profile object is saved successfully
        self.assertEqual(Profile.objects.count(), 1)
        self.assertEqual(profile.user, user)
        self.assertEqual(profile.name, "John Doe")
        self.assertEqual(profile.job_title, "Software Engineer")
        self.assertEqual(profile.avatar, "path/to/avatar.jpg")
        self.assertEqual(profile.bio, "Lorem ipsum dolor sit amet")
        self.assertEqual(profile.education, "Bachelor's Degree")
        self.assertEqual(profile.display_profile, True)
        self.assertEqual(profile.location, "New York")
        self.assertEqual(profile.website, "https://www.example.com")
        self.assertEqual(profile.twitter_username, "johndoe")


    # Test that the Profile object can be updated with all fields
    def test_update_profile_with_all_fields(self):
        # Create a user
        user = User.objects.create(username="testuser")
    
        # Create a skills object
        skills = Skills.objects.create(name="Python")
    
        # Create a profile object
        profile = Profile.objects.create(user=user, name="John Doe", job_title="Software Engineer", bio="I am a software engineer", education="Bachelor's Degree", location="New York", website="www.example.com", twitter_username="johndoe")
    
        # Update the profile object with all fields
        profile.name = "Jane Doe"
        profile.job_title = "Data Scientist"
        profile.avatar = "path/to/avatar.jpg"
        profile.bio = "I am a data scientist"
        profile.skills.add(skills)
        profile.education = "Master's Degree"
        profile.display_profile = False
        profile.location = "San Francisco"
        profile.website = "www.example2.com"
        profile.twitter_username = "janedoe"
        profile.save()
    
        # Check if the profile object has been updated correctly
        self.assertEqual(profile.name, "Jane Doe")
        self.assertEqual(profile.job_title, "Data Scientist")
        self.assertEqual(profile.avatar, "path/to/avatar.jpg")
        self.assertEqual(profile.bio, "I am a data scientist")
        self.assertIn(skills, profile.skills.all())
        self.assertEqual(profile.education, "Master's Degree")
        self.assertFalse(profile.display_profile)
        self.assertEqual(profile.location, "San Francisco")
        self.assertEqual(profile.website, "www.example2.com")
        self.assertEqual(profile.twitter_username, "janedoe")


    # Test that a Profile object can be deleted successfully
    def test_delete_profile(self):
        # Create a Profile object
        profile = Profile.objects.create(user=User.objects.create(username="testuser"))
    
        # Delete the Profile object
        profile.delete()
    
        # Check that the Profile object has been deleted
        self.assertFalse(Profile.objects.filter(user=profile.user).exists())

